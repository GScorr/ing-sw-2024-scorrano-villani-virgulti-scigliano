Index: src/main/java/it/polimi/ingsw/RMI_FINAL/RmiClientF.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polimi.ingsw.RMI_FINAL;\r\n\r\nimport it.polimi.ingsw.CONSTANTS.Constants;\r\nimport it.polimi.ingsw.CONTROLLER.ControllerException;\r\nimport it.polimi.ingsw.CONTROLLER.GameController;\r\nimport it.polimi.ingsw.MODEL.Card.GoldCard;\r\nimport it.polimi.ingsw.MODEL.Card.PlayCard;\r\nimport it.polimi.ingsw.MODEL.Card.ResourceCard;\r\nimport it.polimi.ingsw.MODEL.Card.Side;\r\nimport it.polimi.ingsw.MODEL.Game.State.GameState;\r\nimport it.polimi.ingsw.MODEL.GameField;\r\nimport it.polimi.ingsw.MODEL.Player.Player;\r\n\r\nimport java.net.MalformedURLException;\r\nimport java.rmi.Naming;\r\nimport java.rmi.NotBoundException;\r\nimport java.rmi.RemoteException;\r\nimport java.rmi.registry.LocateRegistry;\r\nimport java.rmi.registry.Registry;\r\nimport java.rmi.server.UnicastRemoteObject;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class RmiClientF extends UnicastRemoteObject implements VirtualViewF {\r\n    final VirtualServerF server;\r\n    private  String token;\r\n\r\n    protected RmiClientF(VirtualServerF server) throws RemoteException {\r\n        this.server = server;\r\n    }\r\n\r\n    private void run() throws RemoteException, InterruptedException {\r\n        this.server.connect(this);\r\n        runCli();\r\n    }\r\n\r\n    private void runCli() throws RemoteException, InterruptedException {\r\n        Scanner scan = new Scanner(System.in);\r\n        VirtualViewF curr_client = this;\r\n        String player_name = \" \";\r\n        Player curr_player;\r\n        boolean new_name;\r\n        // Creo giocatore\r\n        do{\r\n            System.out.print(\"\\nScegli nome Player > \");\r\n            player_name = scan.nextLine();\r\n            this.token = server.createToken(this);\r\n            new_name = server.checkName(player_name,this.token);\r\n        } while(!new_name);\r\n\r\n        // Create a token associated with a client, in the rmi server we have a reference to TokenManagerImplement\r\n        // which contains a map that associate the client with the token, and we also have a map in server that\r\n        // associate the token with the player\r\n        // < RmiClient , TOKEN > < TOKEN , Player >\r\n        //System.out.print(\"\\nToken Player > \" + this.token);\r\n\r\n        String game_name;\r\n        // Se non esistono partite\r\n        if (server.getFreeGames()==null||server.getFreeGames().isEmpty()) {\r\n            newGame_notavailable(player_name);\r\n        } else {\r\n            makeChoice(player_name);\r\n        }\r\n        System.out.print(\"creazione Player andata a buon fine!\\n\");\r\n        new Thread(() -> {\r\n            while (true) {\r\n                try {\r\n                    Thread.sleep(500);\r\n                    server.receiveHeartbeat(token);\r\n                } catch (RemoteException | InterruptedException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n        }).start();\r\n\r\n        System.out.print(\"Aspetta il riempimento partita -\");\r\n        while ( !server.checkFull(token) ) {\r\n            buffering();\r\n        }\r\n        System.out.println(\"\\nEhi la tua partita è piena!\\n\");\r\n        chooseGoal();\r\n        System.out.println(\"\\nHai scelto :\" + server.getRmiController(token).getTtoP().get(token).getGoalCard().toString());\r\n        while(!server.getRmiController(token).getController().getGame().getActual_state().getNameState().equals(\"CHOOSING_STARTING_CARD\")){\r\n            buffering();\r\n        }\r\n        chooseStartingCard();\r\n        while(true) {\r\n            buffering();\r\n        }\r\n\r\n\r\n        /*while (true) {\r\n            System.out.print(\"\\n Inserisci valore nel tuo array, INDICE  >  VALORE>  \");\r\n            int index = scan.nextInt();\r\n            int value = scan.nextInt();\r\n            server.put(index, value, token );\r\n            Integer[] campo = server.getFromToken(token).getCampo();\r\n            for(int i=0; i<10; i++)\r\n                System.out.println(\" \" +campo[i]);\r\n        }*/\r\n\r\n    }\r\n\r\n    private void chooseStartingCard() throws RemoteException{\r\n        Scanner scan = new Scanner(System.in);\r\n        System.out.println(\"\\nScegli lato carta iniziale:\\n\");\r\n        server.showStartingCard(token);\r\n        int done=0;\r\n        while(done==0){\r\n            System.out.println(\"\\nInserisci B per scegliere Back Side o F per scegliere Front side:\");\r\n            String dec = scan.nextLine();\r\n            if (dec.equals(\"F\")){\r\n                done=1;\r\n                server.chooseStartingCard(token,false);\r\n            } else if (dec.equals(\"B\")){\r\n                done=1;\r\n                server.chooseStartingCard(token,true);\r\n            }\r\n            else System.out.println(\"Inserimento errato!\");\r\n        }\r\n    }\r\n\r\n    private void buffering() throws RemoteException, InterruptedException{\r\n        Thread.sleep(70);\r\n        System.out.print(\"\\b\");\r\n        System.out.print(\"/\");\r\n        Thread.sleep(70);\r\n        System.out.print(\"\\b\");\r\n        System.out.print(\"|\");\r\n        Thread.sleep(70);\r\n        System.out.print(\"\\b\");\r\n        System.out.print(\"\\\\\");\r\n        Thread.sleep(70);\r\n        System.out.print(\"\\b\");\r\n        System.out.print(\"-\");\r\n    }\r\n\r\n    private void chooseGoal() throws RemoteException{\r\n        Scanner scan = new Scanner(System.in);\r\n        int done=0;\r\n        while(done==0) {\r\n            System.out.println(\"\\nScegli obiettivo tra:\\n 1-\" + server.getRmiController(token).getTtoP().get(this.token).getInitial_goal_cards().get(0).toString()\r\n                    + \"\\n 2-\" + server.getRmiController(token).getTtoP().get(this.token).getInitial_goal_cards().get(1).toString());\r\n            String choice = scan.nextLine();\r\n            if (choice.equals(\"1\")) {\r\n                done=1;\r\n                server.chooseGoal(token,0);\r\n            } else if (choice.equals(\"2\")){\r\n                done=1;\r\n                server.chooseGoal(token,1);\r\n            } else System.out.println(\"Inserimento errato!\");\r\n        }\r\n    }\r\n\r\n    private void makeChoice(String player_name) throws RemoteException{\r\n        Scanner scan = new Scanner(System.in);\r\n        int done=0;\r\n        while(done==0) {\r\n            System.out.println(\"\\nDigita 'new' per creare una nuova partita, 'old' per entrare in una delle partite disponibili\");\r\n            String decision = scan.nextLine();\r\n            if (decision.equalsIgnoreCase(\"old\")) {\r\n                done = 1;\r\n                chooseMatch(player_name);\r\n            } else if (decision.equalsIgnoreCase(\"new\")) {\r\n                done=1;\r\n                newGame(player_name);\r\n            } else {\r\n                System.out.println(\"\\nInserimento errato!\");\r\n            }\r\n        }\r\n    }\r\n\r\n    private void chooseMatch(String player_name) throws RemoteException {\r\n        Scanner scan = new Scanner(System.in);\r\n        boolean check;\r\n            System.out.println(\"\\nElenco partite disponibili: \");\r\n            List<RmiController> partite = server.getFreeGames();\r\n\r\n            for (RmiController r : partite) {\r\n                System.out.println(r.getController().getGame().getName() + \" ID:\" + r.getController().getGame().getIndex_game()\r\n                        + \" \" + r.getController().getGame().getNumPlayer() + \"/\" + r.getController().getGame().getMax_num_player());\r\n            }\r\n            do {\r\n                System.out.println(\"\\nInserisci ID partita in cui entrare\");\r\n                int ID = scan.nextInt();\r\n                check = server.findRmiController(ID, token, player_name);\r\n            }while(!check);\r\n\r\n    }\r\n\r\n    private void newGame(String player_name) throws RemoteException {\r\n        Scanner scan = new Scanner(System.in);\r\n        System.out.print(\"\\nScegli nome Partita > \");\r\n        String game_name = scan.nextLine();\r\n        int numplayers=4;\r\n        boolean flag;\r\n        do {\r\n            flag = false;\r\n            System.out.print(\"\\nScegli numero giocatori partita (da 2 a 4) > \");\r\n            numplayers = scan.nextInt();\r\n            try {\r\n                server.createGame(game_name, numplayers, token, player_name);\r\n            } catch (ControllerException e) {\r\n                System.err.print(e.getMessage() + \"\\n\");\r\n                flag = true;\r\n            }\r\n        } while(flag);\r\n    }\r\n\r\n    private void newGame_notavailable(String playerName) throws RemoteException {\r\n        Scanner scan = new Scanner(System.in);\r\n        System.out.println(\"\\nNon esiste nessuna partita disponibile, creane una nuova!\");\r\n        System.out.print(\"\\nScegli nome Partita > \");\r\n        String game_name = scan.nextLine();\r\n        boolean flag;\r\n        do {\r\n            flag = false;\r\n            System.out.print(\"\\nScegli numero giocatori partita (da 2 a 4) > \");\r\n            int numplayers = scan.nextInt();\r\n            try {\r\n                server.createGame(game_name, numplayers, token, playerName);\r\n            } catch (ControllerException e) {\r\n                System.err.print(e.getMessage() + \"\\n\");\r\n                flag = true;\r\n            }\r\n        } while(flag);\r\n    }\r\n\r\n    @Override\r\n    public void showUpdate(GameField gamefield) throws RemoteException {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void reportError(String details) throws RemoteException {\r\n        // TODO Attenzione! Questo può causare data race con il thread dell'interfaccia o un altro thread\r\n        System.err.print(\"\\n[ERROR] \" + details + \"\\n> \");\r\n    }\r\n\r\n    @Override\r\n    public void reportMessage(String details) throws RemoteException {\r\n        // TODO Attenzione! Questo può causare data race con il thread dell'interfaccia o un altro thread\r\n        System.err.print(\"\\n[ERROR] \" + details + \"\\n> \");\r\n\r\n    }\r\n\r\n    @Override\r\n    public void showCard(PlayCard card) throws RemoteException {\r\n        Side back = card.getBackSide();\r\n        Side front = card.getFrontSide();\r\n\r\n        System.out.println(\"BACK SIDE\\n--------------------------\");\r\n        System.out.println( \" | \" + back.getAngleLeftUp().toString().charAt(0)  +   \" |               \"+ \" | \" + back.getAngleRightUp().toString().charAt(0) + \" |\\n \" );\r\n        //System.out.println( \" | \" + back.getAngleRightUp().toString().charAt(0) + \" |\\n \" );\r\n        System.out.println( \" |       | \" + back.getCentral_resource().toString().charAt(0) + back.getCentral_resource2().toString().charAt(0) + back.getCentral_resource3().toString().charAt(0) + \" |         |\\n \" );\r\n        System.out.println( \" | \" + back.getAngleLeftDown().toString().charAt(0) +  \" |               \" + \" | \" + back.getAngleRightDown().toString().charAt(0) + \" |\\n \" );\r\n        //System.out.println(  );\r\n        System.out.println(\"--------------------------\\n\\n\");\r\n\r\n        System.out.println(\"FRONT SIDE\\n--------------------------\");\r\n\r\n        if(card instanceof ResourceCard) {\r\n            System.out.println( \" | \" + card.getPoint() + \" | \");\r\n            if ( card instanceof GoldCard ){\r\n                System.out.println(\"  \" + ((GoldCard) card).getPointBonus().toString().charAt(0)  + \"  \" + \" | \" + front.getAngleRightUp().toString().charAt(0) + \" |\\n \");\r\n            }\r\n        }else{\r\n            System.out.println( \" | \" + front.getAngleLeftUp().toString().charAt(0)  + \" | \" + \"             | \" + front.getAngleRightUp().toString().charAt(0) + \" |\\n \");\r\n        }\r\n        //System.out.println( \" | \" + front.getAngleRightUp().toString().charAt(0) + \" |\\n \" );\r\n        System.out.println( \" |       | \" + front.getCentral_resource().toString().charAt(0) + front.getCentral_resource2().toString().charAt(0) + front.getCentral_resource3().toString().charAt(0) + \" |         |\\n \" );\r\n        //System.out.println( \" | \" + front.getAngleLeftDown().toString().charAt(0) + \" |       \" );\r\n        if ( card instanceof GoldCard ){\r\n            System.out.println( \" | \" + front.getAngleLeftDown().toString().charAt(0) + \" |       \" );\r\n            System.out.println(\"  \" + card.getCostraint().toString().charAt(0)  + \"  \" + \" | \" + front.getAngleRightDown().toString().charAt(0) + \" |\\n \");\r\n        }else{\r\n            System.out.println( \" | \" + front.getAngleLeftDown().toString().charAt(0) + \" |              \" + \" | \" + front.getAngleRightDown().toString().charAt(0) + \" |\\n \" );\r\n        }\r\n        //System.out.println( \" | \" + front.getAngleRightDown().toString().charAt(0) + \" |\\n \" );\r\n        System.out.println(\"--------------------------\\n\\n\");\r\n\r\n    }\r\n\r\n\r\n\r\n    public static void main(String[] args) throws RemoteException, NotBoundException, MalformedURLException, InterruptedException {\r\n        Registry registry = LocateRegistry.getRegistry(\"127.0.0.1\", 1234);\r\n        VirtualServerF server = (VirtualServerF) registry.lookup(\"VirtualServer\");\r\n        new RmiClientF(server).run();\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/it/polimi/ingsw/RMI_FINAL/RmiClientF.java b/src/main/java/it/polimi/ingsw/RMI_FINAL/RmiClientF.java
--- a/src/main/java/it/polimi/ingsw/RMI_FINAL/RmiClientF.java	(revision f93c662ff68d8a53c130e4af4057765013774542)
+++ b/src/main/java/it/polimi/ingsw/RMI_FINAL/RmiClientF.java	(date 1714065401255)
@@ -46,8 +46,8 @@
             System.out.print("\nScegli nome Player > ");
             player_name = scan.nextLine();
             this.token = server.createToken(this);
-            new_name = server.checkName(player_name,this.token);
-        } while(!new_name);
+            String x = server.checkName(player_name);
+        } while(false);
 
         // Create a token associated with a client, in the rmi server we have a reference to TokenManagerImplement
         // which contains a map that associate the client with the token, and we also have a map in server that
